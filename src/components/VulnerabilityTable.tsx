
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, ShieldCheck, ShieldAlert, Info } from "lucide-react";

interface Vulnerability {
  id: string;
  name: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  status: 'open' | 'mitigated';
  description?: string;
  detectedOn?: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable = ({ vulnerabilities }: VulnerabilityTableProps) => {
  const getSeverityBadge = (severity: Vulnerability['severity']) => {
    switch (severity) {
      case 'critical':
        return (
          <Badge className="bg-cyber-red text-white">
            <ShieldAlert className="h-3 w-3 mr-1" />
            Critical
          </Badge>
        );
      case 'high':
        return (
          <Badge className="bg-cyber-red/80 text-white">
            <AlertTriangle className="h-3 w-3 mr-1" />
            High
          </Badge>
        );
      case 'medium':
        return (
          <Badge className="bg-cyber-orange text-white">
            <Info className="h-3 w-3 mr-1" />
            Medium
          </Badge>
        );
      case 'low':
        return (
          <Badge className="bg-cyber-green text-white">
            <ShieldCheck className="h-3 w-3 mr-1" />
            Low
          </Badge>
        );
    }
  };
  
  const getStatusBadge = (status: Vulnerability['status']) => {
    switch (status) {
      case 'open':
        return (
          <Badge variant="outline" className="border-cyber-red text-cyber-red">
            Open
          </Badge>
        );
      case 'mitigated':
        return (
          <Badge variant="outline" className="border-cyber-green text-cyber-green">
            Mitigated
          </Badge>
        );
    }
  };

  return (
    <div className="bg-cyber-darker rounded-lg border border-cyber-blue border-opacity-20 overflow-hidden">
      <div className="p-4 border-b border-cyber-blue border-opacity-20">
        <h2 className="text-xl font-semibold text-cyber-blue-light">Detected Vulnerabilities</h2>
      </div>
      
      <div className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow className="border-cyber-blue border-opacity-20 hover:bg-cyber-dark/50">
              <TableHead className="text-cyber-blue-light">Vulnerability</TableHead>
              <TableHead className="text-cyber-blue-light">Severity</TableHead>
              <TableHead className="text-cyber-blue-light">Status</TableHead>
              <TableHead className="text-cyber-blue-light">Detected</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {vulnerabilities.length > 0 ? (
              vulnerabilities.map((vuln) => (
                <TableRow key={vuln.id} className="border-cyber-blue border-opacity-10 hover:bg-cyber-dark/50">
                  <TableCell className="font-medium">{vuln.name}</TableCell>
                  <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                  <TableCell>{getStatusBadge(vuln.status)}</TableCell>
                  <TableCell className="text-muted-foreground">{vuln.detectedOn}</TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={4} className="text-center py-6 text-muted-foreground">
                  No vulnerabilities detected
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};

export default VulnerabilityTable;
